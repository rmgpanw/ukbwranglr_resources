SECONDARY_CARE_FILES <- list.files(CALIBER_SECONDARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES_ICD <- subset(SECONDARY_CARE_FILES, grepl("^ICD_", SECONDARY_CARE_FILES))
SECONDARY_CARE_FILES_OPCS <- subset(SECONDARY_CARE_FILES, grepl("^OPCS_", SECONDARY_CARE_FILES))
# FUNCTIONS ---------------------------------------------------------------
# read_csv() - all columns read as type character
read_csv_as_character <- partial(read_csv, col_types = cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- as_mapper(
~ .x %>%
pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code
)
)
standardise_secondary_care_icd10 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
standardise_secondary_care_opcs4 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(secondary_care_files_test,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function)
}
library(ukbwranglr)
library(readr)
library(purrr)
library(dplyr)
library(tidyr)
library(stringr)
library(DBI)
library(RSQLite)
# CONSTANTS -------------------------------------------------------------
CALIBER_ROOT <- "caliber/data/chronological-map-phenotypes-master"
CALIBER_PRIMARY <- "caliber/data/chronological-map-phenotypes-master/primary_care"
CALIBER_SECONDARY <- "caliber/data/chronological-map-phenotypes-master/secondary_care"
CSV_REGEX <- "+\\.csv$"
# get primary care file names
PRIMARY_CARE_FILES <- list.files(CALIBER_PRIMARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES <- list.files(CALIBER_SECONDARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES_ICD <- subset(SECONDARY_CARE_FILES, grepl("^ICD_", SECONDARY_CARE_FILES))
SECONDARY_CARE_FILES_OPCS <- subset(SECONDARY_CARE_FILES, grepl("^OPCS_", SECONDARY_CARE_FILES))
# FUNCTIONS ---------------------------------------------------------------
# read_csv() - all columns read as type character
read_csv_as_character <- partial(read_csv, col_types = cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- as_mapper(
~ .x %>%
pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code
)
)
standardise_secondary_care_icd10 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
standardise_secondary_care_opcs4 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(secondary_care_files_test,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function)
}
# read dictionary and remove ".csv" from all strings
caliber_dictionary <- read_csv_as_character(paste(CALIBER_ROOT, "dictionary.csv",
sep = "/")) %>%
mutate(across(everything(), ~ str_replace(.x, ".csv", "")))
primary_care_codes <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care)
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(filenames,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function)
}
primary_care_codes <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care)
View(primary_care_codes)
primary_care_codes <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care) %>%
bind_rows()
View(primary_care_codes)
test <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care)
View(test)
View(caliber_dictionary)
secondary_care_codes_opcs4 <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_OPCS,
standardising_function = standardise_secondary_care_opcs4)
library(ukbwranglr)
library(readr)
library(purrr)
library(dplyr)
library(tidyr)
library(stringr)
library(DBI)
library(RSQLite)
# CONSTANTS -------------------------------------------------------------
CALIBER_ROOT <- "caliber/data/chronological-map-phenotypes-master"
CALIBER_PRIMARY <- "caliber/data/chronological-map-phenotypes-master/primary_care"
CALIBER_SECONDARY <- "caliber/data/chronological-map-phenotypes-master/secondary_care"
CSV_REGEX <- "+\\.csv$"
# get primary care file names
PRIMARY_CARE_FILES <- list.files(CALIBER_PRIMARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES <- list.files(CALIBER_SECONDARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES_ICD <- subset(SECONDARY_CARE_FILES, grepl("^ICD_", SECONDARY_CARE_FILES))
SECONDARY_CARE_FILES_OPCS <- subset(SECONDARY_CARE_FILES, grepl("^OPCS_", SECONDARY_CARE_FILES))
# FUNCTIONS ---------------------------------------------------------------
# read_csv() - all columns read as type character
read_csv_as_character <- partial(read_csv, col_types = cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- as_mapper(
~ .x %>%
pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code
)
)
standardise_secondary_care_icd10 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
standardise_secondary_care_opcs4 <- as_mapper(
~ .x %>%
mutate(code_type = "OPCS4") %>%
select(
disease = Disease,
description = OPCS4codeDescr,
category = Category,
code_type,
code = 	OPCS4code
)
)
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(filenames,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function) %>%
bind_rows()
}
# MAIN --------------------------------------------------------------------
# Dictionary (NOT NEEDED)
# read dictionary and remove ".csv" from all strings
# caliber_dictionary <- read_csv_as_character(paste(CALIBER_ROOT, "dictionary.csv",
#                                                   sep = "/")) %>%
#   mutate(across(everything(), ~ str_replace(.x, ".csv", "")))
# Read files into 3 dataframes - primary care and secondary care (ICD and OPCS)
primary_care_codes <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care)
secondary_care_codes_icd <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_ICD,
standardising_function = standardise_secondary_care_icd10)
secondary_care_codes_opcs4 <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_OPCS,
standardising_function = standardise_secondary_care_opcs4)
# write to database
# Read files into 3 dataframes - primary care and secondary care (ICD and OPCS)
result <- vector(mode = "list", length = 3L)
# Read files into 3 dataframes - primary care and secondary care (ICD and OPCS)
result <- vector(mode = "list", length = 3L)
names(result) = c("primary_care_codes",
"secondary_care_codes_icd",
"secondary_care_codes_opcs4")
library(ukbwranglr)
library(readr)
library(purrr)
library(dplyr)
library(tidyr)
library(stringr)
library(DBI)
library(RSQLite)
# CONSTANTS -------------------------------------------------------------
CALIBER_ROOT <- "caliber/data/chronological-map-phenotypes-master"
CALIBER_PRIMARY <- "caliber/data/chronological-map-phenotypes-master/primary_care"
CALIBER_SECONDARY <- "caliber/data/chronological-map-phenotypes-master/secondary_care"
CSV_REGEX <- "+\\.csv$"
# get primary care file names
PRIMARY_CARE_FILES <- list.files(CALIBER_PRIMARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES <- list.files(CALIBER_SECONDARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES_ICD <- subset(SECONDARY_CARE_FILES, grepl("^ICD_", SECONDARY_CARE_FILES))
SECONDARY_CARE_FILES_OPCS <- subset(SECONDARY_CARE_FILES, grepl("^OPCS_", SECONDARY_CARE_FILES))
# FUNCTIONS ---------------------------------------------------------------
# read_csv() - all columns read as type character
read_csv_as_character <- partial(read_csv, col_types = cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- as_mapper(
~ .x %>%
pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code
)
)
standardise_secondary_care_icd10 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code
)
)
standardise_secondary_care_opcs4 <- as_mapper(
~ .x %>%
mutate(code_type = "OPCS4") %>%
select(
disease = Disease,
description = OPCS4codeDescr,
category = Category,
code_type,
code = 	OPCS4code
)
)
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(filenames,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function) %>%
bind_rows()
}
# MAIN --------------------------------------------------------------------
# Dictionary (NOT NEEDED)
# read dictionary and remove ".csv" from all strings
# caliber_dictionary <- read_csv_as_character(paste(CALIBER_ROOT, "dictionary.csv",
#                                                   sep = "/")) %>%
#   mutate(across(everything(), ~ str_replace(.x, ".csv", "")))
# Read files into 3 dataframes - primary care and secondary care (ICD and OPCS)
result <- vector(mode = "list", length = 3L)
names(result) = c("primary_care_codes",
"secondary_care_codes_icd",
"secondary_care_codes_opcs4")
result$primary_care_codes <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care)
result$secondary_care_codes_icd <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_ICD,
standardising_function = standardise_secondary_care_icd10)
result$secondary_care_codes_opcs4 <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_OPCS,
standardising_function = standardise_secondary_care_opcs4)
# combine
result <- bind_rows(result)
View(result)
getwd()
# mutate phenotype_source indicator column
result <- result %>%
mutate(phenotype_source = "caliber")
View(result)
# write to database
con <- DBI::dbConnect(RSQLite::SQLite(), paste(CALIBER_ROOT, "ukb.db", sep = "/"))
View(con)
str(result)
DBI::dbWriteTable(
conn = con,
name = "phenotype_codes",
value = result,
overwrite = FALSE, # ensure table is not inadvertently overwritten
append = FALSE
)
test <- tbl(con, "phenotype_codes")
test %>%
head()
?%like%
test %>%
filter(code_type == "OPCS4" & disease == "Oesophageal varices")
test %>%
filter(code_type == "OPCS4" & disease == "Oesophageal varices") %>%
show_query()
test_imported <- test %>%
filter(code_type == "OPCS4" & disease == "Oesophageal varices") %>%
collect()
View(test_imported)
UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets()
library(purrr)
library(readxl)
UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets()
UKB_ALL_LKPS_MAPS_V2 <-"ukb_primarycare_codings/data/all_lkps_maps_v2.xls"
UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets()
UKB_ALL_LKPS_MAPS_V2 <-"ukb_primarycare_codings/data/all_lkps_maps_v2.xlsx"
# read all sheets to a named list
all_lkps_maps_v2 <- UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets() %>%
set_names() %>%
map(read_excel, path = UKB_ALL_LKPS_MAPS_V2, col_types = "text")
all_lkps_maps_v2 <- UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets()
all_lkps_maps_v2
all_lkps_maps_v2 <- UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets() %>%
set_names()
all_lkps_maps_v2_test <- all_lkps_maps_v2 %>%
discard(~ .x %in% c("Description", "Contents"))
all_lkps_maps_v2 <- UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets() %>%
discard(~ .x %in% c("Description", "Contents")) %>% # first 2 sheets not needed
set_names()
all_lkps_maps_v2
# read all sheets to a named list
all_lkps_maps_v2 <- UKB_ALL_LKPS_MAPS_V2 %>%
excel_sheets() %>%
discard(~ .x %in% c("Description", "Contents")) %>% # first 2 sheets not needed
set_names() %>%
map(read_excel,
path = UKB_ALL_LKPS_MAPS_V2,
col_types = "text")
View(all_lkps_maps_v2)
for (sheet in all_lkps_maps_v2) {
print(sheet)
}
for (sheet in seq_along(all_lkps_maps_v2)) {
print(names(all_lkps_maps_v2[[sheet]]))
}
for (sheet in names(all_lkps_maps_v2)) {
print(names(all_lkps_maps_v2[[sheet]]))
}
for (sheet in names(all_lkps_maps_v2)) {
print(names(all_lkps_maps_v2[sheet]))
}
names(all_lkps_maps_v2[1])
all_lkps_maps_v2[[1]]
write.csv(head(mtcars), file = "temp.csv")
renv::snapshot()
renv::restore()
install.packages("renv")
install.packages("renv")
install.packages("data.table")
UKB_DATA_DICTIONARY_URL <- "https://biobank.ctsu.ox.ac.uk/~bbdatan/Data_Dictionary_Showcase.tsv"
UKB_CODINGS_URL <- "https://biobank.ctsu.ox.ac.uk/~bbdatan/Codings.tsv"
# FUNCTIONS ---------------------------------------------------------------
# fread() a tsv file, all columns read as type character
fread_tsv_as_character <- partial(data.table::fread,
colClasses = c('character'),
sep = "\t",
quote = " ",
na.strings = c("", "NA"))
# FUNCTIONS ---------------------------------------------------------------
# fread() a tsv file, all columns read as type character
fread_tsv_as_character <- purrr::partial(data.table::fread,
colClasses = c('character'),
sep = "\t",
quote = " ",
na.strings = c("", "NA"))
# MAIN --------------------------------------------------------------------
# read files
ukb_data_dictionary <- fread_tsv_as_character(UKB_DATA_DICTIONARY_URL)
ukb_codings <- fread_tsv_as_character(UKB_CODINGS_URL)
# write to database
con <- DBI::dbConnect(RSQLite::SQLite(), "ukb.db")
renv::snapshot()
install.packages("configr")
renv::snapshot()
renv::status()
?configr::read.config
# path to database
config <- configr::read.config("../config.ini")
# path to database
config <- configr::read.config("../config.ini")
# path to database
config <- configr::read.config("config.ini")
UKB_DB <- config$PATHS$UKB_DB
file.exists("ukb.db")
file.exists("ukb.dbi")
file.exists(UKB_DB
file.exists(UKB_DB)
UKB_DB <- config$PATHS$UKB_DBi
UKB_DB <- config$PATHS$UKB_DB
UKB_DB <- config$PATHS$UKB_DBi
is.null(UKB_DB)
git log
git log
renv::snapshot()
?purrr:set_names
?purrr::set_names
getwd()
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/setup/caliber_repo_to_db.R', echo=TRUE)
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/setup/caliber_repo_to_db.R', echo=TRUE)

code_type = to,
disease = disease,
disease_category = disease_category,
phenotype_source = "caliber"
)
}
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# read2 to read3
result <- unique(df$category) %>%
set_names() %>%
map( ~ NULL)
counter <- 1
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", length(names(result))))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
map_caliber_sinale_disease_category(
read2_df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
return(bind_rows(result))
}
debugonce(map_caliber_multiple_disease_categories)
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# read2 to read3
result <- unique(df$category) %>%
set_names() %>%
map( ~ NULL)
counter <- 1
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", length(names(result))))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
map_caliber_sinale_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
return(bind_rows(result))
}
debugonce(map_caliber_multiple_disease_categories)
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
debugonce(map_caliber_multiple_disease_categories)
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
debugonce(map_caliber_multiple_disease_categories)
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
any(
class(standardised_codelist) %in% c("data.frame", "data.table", "tbl_df")
)
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# possibly version of map_caliber_sinale_disease_category
possibly_map_caliber_sinale_disease_category <- possibly(map_caliber_sinale_disease_category,
otherwise = NULL)
# read2 to read3
result <- unique(df$category) %>%
set_names() %>%
map( ~ NULL)
counter <- 1
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", length(names(result))))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
possibly_map_caliber_sinale_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
return(bind_rows(result))
}
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
View(result)
View(result[["secondary_care_codes_icd9"]])
library(ukbwranglr)
library(readr)
library(purrr)
library(dplyr)
library(tidyr)
library(stringr)
library(DBI)
library(RSQLite)
library(configr)
config <- read.config("config.ini")
# CONSTANTS -------------------------------------------------------------
# location to write database
UKB_DB <- config$PATHS$UKB_DB
# caliber paths
CALIBER_ROOT <- config$PATHS$CALIBER_ROOT
CALIBER_PRIMARY <- config$PATHS$CALIBER_PRIMARY
CALIBER_SECONDARY <- config$PATHS$CALIBER_SECONDARY
CSV_REGEX <- config$PATHS$CSV_REGEX
# get primary care file names
PRIMARY_CARE_FILES <- list.files(CALIBER_PRIMARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES <- list.files(CALIBER_SECONDARY,
pattern = CSV_REGEX)
SECONDARY_CARE_FILES_ICD <- subset(SECONDARY_CARE_FILES, grepl("^ICD_", SECONDARY_CARE_FILES))
SECONDARY_CARE_FILES_OPCS <- subset(SECONDARY_CARE_FILES, grepl("^OPCS_", SECONDARY_CARE_FILES))
# FUNCTIONS ---------------------------------------------------------------
# read_csv() - all columns read as type character
read_csv_as_character <- partial(read_csv, col_types = cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- as_mapper(
~ .x %>%
pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
mutate(
phenotype_source = "caliber"
) %>%
select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code,
phenotype_source
)
)
standardise_secondary_care_icd10 <- as_mapper(
~ .x %>%
mutate(code_type = "ICD10",
phenotype_source = "caliber") %>%
select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code,
phenotype_source
)
)
standardise_secondary_care_opcs4 <- as_mapper(
~ .x %>%
mutate(code_type = "OPCS4",
phenotype_source = "caliber") %>%
select(
disease = Disease,
description = OPCS4codeDescr,
category = Category,
code_type,
code = 	OPCS4code,
phenotype_source
)
)
# functions to reformat codes for UKB: remove last 2 digits from read2 codes,
# and remove "." from ICD-10 codes
reformat_caliber_read2 <- function(read2_df) {
read2_df <-
read2_df %>%
filter(code_type == "Readcode") %>%
# label as 'read2' (ukbwranglr format)
mutate(code_type = "read2") %>%
# filter for primary descriptions only: the last 2 characters indicate whether
# description is the  preferred one or not
filter(str_detect(code, ".*00$")) %>%
# remove last 2 characters
mutate(code = str_replace(code,
pattern = "00$",
replacement = ""))
}
reformat_caliber_icd10 <- function(icd10_df) {
icd10_df <-
icd10_df %>%
# label as 'icd10' (ukbwranglr format)
mutate(code_type = "icd10")
}
reformat_caliber_opcs4 <- function(opcs4_df) {
opcs4_df <-
opcs4_df %>%
# label as 'icd10' (ukbwranglr format)
mutate(code_type = "opcs4")
}
# functions to map codes from read2 to read3 and icd10 to icd9
map_caliber_sinale_disease_category <- function(df,
disease,
disease_category,
ukb_code_mappings,
from,
to) {
# process read codes only - drop medcodes
# map to read3
df <- df %>%
pluck("code") %>%
map_codes(from = from,
to = to,
ukb_code_mappings = ukb_code_mappings,
codes_only = FALSE,
preferred_description_only = TRUE,
standardise_output = TRUE)
# reformat
reformat_standardised_codelist(
standardised_codelist = df,
code_type = to,
disease = disease,
disease_category = disease_category,
phenotype_source = "caliber"
)
}
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# possibly version of map_caliber_sinale_disease_category
possibly_map_caliber_sinale_disease_category <- possibly(map_caliber_sinale_disease_category,
otherwise = NULL)
# read2 to read3
result <- unique(df$category) %>%
set_names() %>%
map( ~ NULL)
counter <- 1
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", length(names(result))))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
possibly_map_caliber_sinale_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
return(bind_rows(result))
}
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
set_names(nm = str_replace(filenames,
file_ext,
"")) %>% # remove '.csv'
map(read_function) %>%
map(standardising_function) %>%
bind_rows()
}
# Read files into 3 dataframes - primary care and secondary care (ICD and OPCS)
result <- c(
"primary_care_codes_read2",
"primary_care_codes_read3",
"secondary_care_codes_icd10",
"secondary_care_codes_icd9",
"secondary_care_codes_opcs4"
) %>%
set_names() %>%
map( ~ NULL)
result$primary_care_codes_read2 <- read_csv_to_named_list(CALIBER_PRIMARY,
filenames = PRIMARY_CARE_FILES,
standardising_function = standardise_primary_care) %>%
reformat_caliber_read2()
result$secondary_care_codes_icd10 <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_ICD,
standardising_function = standardise_secondary_care_icd10) %>%
reformat_caliber_icd10()
result$secondary_care_codes_opcs4 <- read_csv_to_named_list(CALIBER_SECONDARY,
filenames = SECONDARY_CARE_FILES_OPCS,
standardising_function = standardise_secondary_care_opcs4) %>%
reformat_caliber_opcs4
result$primary_care_codes_read3 <- map_caliber_multiple_disease_categories(
result$primary_care_codes_read2,
ukb_code_mappings = ukb_code_mappings,
from = "read2",
to = "read3"
)
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# possibly version of map_caliber_sinale_disease_category
possibly_map_caliber_sinale_disease_category <- possibly(map_caliber_sinale_disease_category,
otherwise = NULL)
# read2 to read3
result <- unique(df$category) %>%
set_names() %>%
map( ~ NULL)
total_n_disease_categories = length(names(result))
counter <- 1
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", total_n_disease_categories))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
possibly_map_caliber_sinale_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
return(bind_rows(result))
}
result$primary_care_codes_read3 <- map_caliber_multiple_disease_categories(
result$primary_care_codes_read2,
ukb_code_mappings = ukb_code_mappings,
from = "read2",
to = "read3"
)
View(result)
result$secondary_care_codes_icd9 <- map_caliber_multiple_disease_categories(
result$secondary_care_codes_icd10,
ukb_code_mappings = ukb_code_mappings,
from = "icd10",
to = "icd9"
)
View(result)
debugonce(map_caliber_multiple_disease_categories)
result$primary_care_codes_read3 <- map_caliber_multiple_disease_categories(
result$primary_care_codes_read2,
ukb_code_mappings = ukb_code_mappings,
from = "read2",
to = "read3"
)
?possibly
length(unique(df$category))
df$category %>% head()
View(df)
View(disease_df)
View(result)
result[[disease_category]]
names(result)
unique(df$category)
names(result)
test_result <- vector("list", length = length(unique(df$category)))
View(test_result)
names(test_result) <- unique(df$category)
View(test_result)
View(test_result)
result <- unique(df$category) %>%
set_names() %>%
map( ~ NA)
View(result)
result[[disease_category]]
possibly_map_caliber_sinale_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
renv::status()
renv::status()
renv::snapshot()
targets::tar_visnetwork()
targets::tar_glimpse()
targets::tar_meta() %>%
DT::datatable()
library(magrittr)
targets::tar_meta() %>%
DT::datatable()
targets::tar_glimpse()
# make connection
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "ukb.db")
# create dm object
ukb_db <- dm::dm_from_src(con)
# draw schema
ukb_db %>%
dm::dm_set_colors(
darkgreen = c(
bnf_lkp,
dmd_lkp,
icd10_lkp,
icd9_icd10,
icd9_lkp,
read_ctv3_icd10,
read_ctv3_icd9,
read_ctv3_lkp,
read_ctv3_opcs4,
read_ctv3_read_v2,
read_v2_drugs_bnf,
read_v2_drugs_lkp,
read_v2_icd10,
read_v2_icd9,
read_v2_lkp,
read_v2_opcs4,
read_v2_read_ctv3
),
darkred = c(
ukb_data_dict,
ukb_codings
),
purple = c(
caliber_codes
)
) %>%
dm::dm_draw()
tar_make()
targets::tar_make()
library(targets)
tar_destroy()
system.time(tar_make_future(workers=3))
tar_destroy()
library(targets)
system.time(tar_make())
library(targets)
tar_visnetwork()

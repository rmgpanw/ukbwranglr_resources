dplyr::select(
disease,
description,
category,
code_type,
code,
phenotype_source
)
}) %>%
dplyr::bind_rows() %>%
dplyr::distinct()
# now re-join to original df
result <- dplyr::bind_rows(df, df_icd10_with_modifiers)
tar_make(callr_function = NULL)
debugonce(append_icd10_ALT_CODEs_with_modifiers)
df_backup <- df
df_icd10_with_modifiers <- disease_categories %>%
purrr::set_names() %>%
purrr::map(.f = ~ {
# get base_codes for single disease category
base_codes_to_expand <- df_icd10_with_modifiers %>%
dplyr::filter(category == .x) %>%
.$code
# get disease for disease category
DISEASE <- df_icd10_with_modifiers %>%
dplyr::filter(category == .x) %>%
.$disease %>%
unique() # should be unique
# get full set of codes + modifiers for these 'base_codes'
expanded_codes <- icd10_with_modifiers_all %>%
dplyr::filter(base_code %in% base_codes_to_expand) %>%
.$ICD10_CODE
# add in base codes
expanded_codes <- c(expanded_codes, base_codes_to_expand)
# get descriptions
ukbwranglr::lookup_codes(codes = expanded_codes,
code_type = "icd10",
ukb_code_mappings = ukb_code_mappings,
preferred_description_only = TRUE,
standardise_output = TRUE,
quiet = TRUE) %>%
dplyr::mutate(
disease = DISEASE,
code_type = "icd10",
phenotype_source = "caliber",
category = .x) %>%
dplyr::select(
disease,
description,
category,
code_type,
code,
phenotype_source
)
}) %>%
dplyr::bind_rows() %>%
dplyr::distinct()
result <- dplyr::bind_rows(df, df_icd10_with_modifiers)
View(result)
targets::tar_make()
library(dm)
library(RSQLite)
library(DBI)
library(tidyverse)
# connect to ukb.db
con <- DBI::dbConnect(SQLite(), "ukb.db")
ukbdb <- dm::dm_from_src(src = con,
learn_keys = FALSE)
caliber_codes <- ukbdb$caliber_codes %>%
collect()
caliber_codes_dm <- caliber_codes %>%
filter(disease == "Diabetes")
# connect to old ukb.db
con2 <- DBI::dbConnect(RSQLite::SQLite(), dbname = "/Users/alasdair/Documents/Data/UKB/AK/ukb_db/ukb.db")
ukbdb2 <- dm::dm_from_src(src = con2,
learn_keys = FALSE)
caliber_codes2 <- ukbdb2$caliber_codes %>%
collect()
caliber_codes_dm2 <- caliber_codes2 %>%
filter(disease == "Diabetes")
all_t1dm_t2dm_codes <- ukbdb2$all_t1dm_t2dm_codes %>%
collect()
caliber_codes_dm2 <- caliber_codes2 %>%
filter(disease == "Diabetes")
# missing codes
dm_codes_missing_from_caliber2 <- all_t1dm_t2dm_codes %>%
filter(!code %in% caliber_codes_dm2$code)
dm_codes_missing_from_caliber <- all_t1dm_t2dm_codes %>%
filter(!code %in% caliber_codes_dm$code)
hm <- dm_codes_missing_from_caliber %>%
filter(!code %in% dm_codes_missing_from_caliber2$code)
hm <- caliber_codes_dm %>%
filter(!code %in% caliber_codes_dm2$code)
hm2 <- caliber_codes_dm2 %>%
filter(!code %in% caliber_codes_dm$code)
# why is C10E1 disappearing?
diabetes_caliber <- read_csv("https://github.com/spiros/chronological-map-phenotypes/raw/master/primary_care/CPRD_diabetes.csv",
col_types = readr::cols(.default = "c"))
diabetes_caliber_standardised <- diabetes_caliber %>%
tidyr::pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
dplyr::mutate(
phenotype_source = "caliber"
) %>%
dplyr::select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code,
phenotype_source
)
diabetes_caliber_reformatted <- reformat_caliber_read2(diabetes_caliber_standardised)
test <- diabetes_caliber_standardised %>%
# filter for only read2 codes
dplyr::filter(code_type == "Readcode") %>%
# label as 'read2' (ukbwranglr format)
dplyr::mutate(code_type = "read2") %>%
# TO DELETE - not all codes include the primary description e.g. C108.
# # filter for primary descriptions only: the last 2 characters indicate whether
# # description is the  preferred one or not
# dplyr::filter(stringr::str_detect(code, ".*00$")) %>%
#
# # remove last 2 characters
# dplyr::mutate(code = stringr::str_replace(code,
#                                           pattern = "00$",
#                                           replacement = ""))
# remove last 2 characters
dplyr::mutate(code = stringr::str_sub(code,
start = 1L,
end = -3L)) %>%
# take only one description per code
dplyr::group_by(code) %>%
dplyr::slice(1L) %>%
dplyr::ungroup()
# TODO
# E10 - has modifiers, only E10 shows up with current ukbwrnalgr function. need
# to make function to get all modifier versions with ICD10
# check whether C10E1 is present in latest ukb.db
View(dm_codes_missing_from_caliber)
# OVERVIEW ----------------------------------------------------------------
# Functions to collect all CALIBER code lists into a single standardised table, map
# codes from read2 -> read3 and from icd10 ->icd9, and write this to a SQLite
# database.
# Medcodes are dropped and only primary descriptions are kept for read2 and read3
# FUNCTIONS ---------------------------------------------------------------
download_caliber_repo <- function(url = "https://github.com/spiros/chronological-map-phenotypes/archive/07594b89fd7602b6e885987b56373a95359da52b.zip",
commit = "07594b89fd7602b6e885987b56373a95359da52b") {
# file paths
caliber_repo_zip <- tempfile()
caliber_repo_unzipped = file.path(tempdir(), paste("chronological-map-phenotypes",
commit,
sep = "-"))
# download zip file
download.file(url,
destfile = caliber_repo_zip)
# unzip
utils::unzip(caliber_repo_zip,
exdir = tempdir())
# return path to downloaded and unzipped directory
return(caliber_repo_unzipped)
}
# read_csv() - all columns read as type character
read_csv_as_character <- purrr::partial(readr::read_csv, col_types = readr::cols(.default = "c"))
# standardising functions for primary and secondary care (ICD and OPCS4) csv files
standardise_primary_care <- purrr::as_mapper(
~ .x %>%
tidyr::pivot_longer(
cols = c("Readcode", "Medcode"),
names_to = "code_type",
values_to = "code"
) %>%
dplyr::mutate(
author = "caliber"
) %>%
dplyr::select(
disease = Disease,
description = ReadcodeDescr,
category = Category,
code_type,
code,
author
)
)
standardise_secondary_care_icd10 <- purrr::as_mapper(
~ .x %>%
dplyr::mutate(code_type = "icd10",
author = "caliber") %>%
dplyr::select(
disease = Disease,
description = ICD10codeDescr,
category = Category,
code_type,
code = ICD10code,
author
)
)
standardise_secondary_care_opcs4 <- purrr::as_mapper(
~ .x %>%
dplyr::mutate(code_type = "opcs4",
author = "caliber") %>%
dplyr::select(
disease = Disease,
description = OPCS4codeDescr,
category = Category,
code_type,
code = 	OPCS4code,
author
)
)
# functions to reformat codes for UKB
get_icd10_codes_with_modifiers <- function(icd10_lkp) {
icd10_lkp %>%
dplyr::filter(!is.na(MODIFIER_4) | !is.na(MODIFIER_5)) %>%
# mutate column for codes minus modifiers
dplyr::mutate(base_code = stringr::str_replace_all(
ICD10_CODE,
"\\.[:digit:]*$",
""
))
}
append_icd10_ALT_CODEs_with_modifiers <- function(df,
ukb_code_mappings) {
# all icd10 codes with modifiers
icd10_with_modifiers_all <- get_icd10_codes_with_modifiers(ukb_code_mappings$icd10_lkp)
# icd10 codes (base e.g. E10) with modifiers (e.g. E10.0, E10.1 etc) in df
df_icd10_with_modifiers <- df %>%
dplyr::filter(code %in% icd10_with_modifiers_all$base_code)
# ...remove these from df
df <- df %>%
dplyr::filter(!code %in% icd10_with_modifiers_all$base_code)
# append ALT_CODES with modifiers, by disease
disease_categories <- unique(df_icd10_with_modifiers$category)
df_icd10_with_modifiers <- disease_categories %>%
purrr::set_names() %>%
purrr::map(.f = ~ {
# get base_codes for single disease category
base_codes_to_expand <- df_icd10_with_modifiers %>%
dplyr::filter(category == .x) %>%
.$code
# get disease for disease category
DISEASE <- df_icd10_with_modifiers %>%
dplyr::filter(category == .x) %>%
.$disease %>%
unique() # should be unique
# get full set of codes + modifiers for these 'base_codes'
expanded_codes <- icd10_with_modifiers_all %>%
dplyr::filter(base_code %in% base_codes_to_expand) %>%
.$ICD10_CODE
# add in base codes
expanded_codes <- c(expanded_codes, base_codes_to_expand)
# get descriptions
ukbwranglr::lookup_codes(codes = expanded_codes,
code_type = "icd10",
ukb_code_mappings = ukb_code_mappings,
preferred_description_only = TRUE,
standardise_output = TRUE,
quiet = TRUE) %>%
dplyr::mutate(
disease = DISEASE,
code_type = "icd10",
author = "caliber",
category = .x) %>%
dplyr::select(
disease,
description,
category,
code_type,
code,
author
)
}) %>%
dplyr::bind_rows() %>%
dplyr::distinct()
# now re-join to original df
result <- dplyr::bind_rows(df, df_icd10_with_modifiers)
return(result)
}
# read2 codes: filter for only primary descriptions and remove last 2 characters
# (the last 2 characters indicate whether description is primary or not for a
# code) and remove "." from ICD-10 codes
reformat_caliber_read2 <- function(read2_df) {
read2_df %>%
# filter for only read2 codes
dplyr::filter(code_type == "Readcode") %>%
# label as 'read2' (ukbwranglr format)
dplyr::mutate(code_type = "read2") %>%
# TO DELETE - not all codes include the primary description e.g. C108.
# # filter for primary descriptions only: the last 2 characters indicate whether
# # description is the  preferred one or not
# dplyr::filter(stringr::str_detect(code, ".*00$")) %>%
#
# # remove last 2 characters
# dplyr::mutate(code = stringr::str_replace(code,
#                                           pattern = "00$",
#                                           replacement = ""))
# remove last 2 characters
dplyr::mutate(code = stringr::str_sub(code,
start = 1L,
end = -3L)) %>%
# take only one description per code, per disease
dplyr::group_by(disease, code) %>%
dplyr::slice(1L) %>%
dplyr::ungroup()
}
reformat_caliber_icd10 <- function(icd10_df,
ukb_code_mappings) {
# get all ALT_CODES e.g. E10
icd10_df <- append_icd10_ALT_CODEs_with_modifiers(df = icd10_df,
ukb_code_mappings = ukb_code_mappings)
return(icd10_df)
# TODO - note a few CALIBER icd10 codes are in the ALT_CODE format, and a
# couple appear in neither ("A90" and "A91": check if there are any others
# like this):
# c(
#   'I714',
#   'I716',
#   'I719',
#   'I250',
#   'I251',
#   'I253',
#   'I254',
#   'I255',
#   'I256',
#   'I258',
#   'I259',
#   'O242',
#   'G590',
#   'G632',
#   'H280',
#   'H360',
#   'M142',
#   'N083',
#   'O240',
#   'O241',
#   'O243',
#   'I252',
#   'I241',
#   'A90',
#   'A91',
#   'I731',
#   'I738',
#   'I739',
#   'I743',
#   'I744',
#   'I745',
#   'I201',
#   'I208',
#   'I209',
#   'I200',
#   'N23.X',
#   'A90',
#   'A91'
# )
}
# functions to map codes from read2 to read3 and icd10 to icd9
map_caliber_single_disease_category <- function(df,
disease,
disease_category,
ukb_code_mappings,
from,
to) {
# process read codes only - drop medcodes
# map to read3
df <- df %>%
purrr::pluck("code") %>%
map_codes(from = from,
to = to,
ukb_code_mappings = ukb_code_mappings,
codes_only = FALSE,
preferred_description_only = TRUE,
standardise_output = TRUE)
# reformat
if (is.null(df)) {
return(NULL)
}
reformat_standardised_codelist(
standardised_codelist = df,
code_type = to,
disease = disease,
disease_category = disease_category,
author = "caliber"
)
}
map_caliber_multiple_disease_categories <- function(df,
ukb_code_mappings,
from,
to,
verbose = TRUE) {
# read2 to read3
result <- unique(df$category) %>%
purrr::set_names() %>%
purrr::map( ~ NULL)
total_n_disease_categories = length(names(result))
counter <- 1
# loop through disease categories by disease (nested for loop)
diseases <- unique(df$disease)
for (disease in diseases) {
disease_df <- df[df$disease == disease, ]
categories <- unique(disease_df$category)
# for each disease category, map codes
for (disease_category in categories) {
if (verbose) {
message(paste0("Mapping codes for ",
disease_category,
". ",
counter, " of ", total_n_disease_categories))
}
disease_category_df <- disease_df[disease_df$category == disease_category, ]
result[[disease_category]] <-
map_caliber_single_disease_category(
df = disease_category_df,
disease = disease,
disease_category = disease_category,
ukb_code_mappings = ukb_code_mappings,
from = from,
to = to
)
counter <- counter + 1
}
}
# combine list of results into a single df and return
return(dplyr::bind_rows(result))
}
# reads a list of csv files into a named list, standardises, then combines into single df
read_csv_to_named_list_and_combine <- function(
directory, # directory where files are located
filenames, # vector of file names
standardising_function, # function to process each file with
file_ext = ".csv", # file extension to remove
read_function = read_csv_as_character # function read files
) {
paste(directory, filenames, sep = "/") %>%
purrr::set_names(nm = stringr::str_replace(filenames,
file_ext,
"")) %>% # remove '.csv'
purrr::map(read_function) %>%
purrr::map(standardising_function) %>%
dplyr::bind_rows()
}
devtools::install_github("rmgpanw/ukbwranglr@dev")
install.packages("devtools")
devtools::install_github("rmgpanw/ukbwranglr@dev")
devtools::install_github("rmgpanw/ukbwranglr")
targets::tar_make()
targets::tar_make()
library(targets)
library(tidyverse)
tar_load(ALL_LKPS_MAPS_DB)
con <- DBI::dbConnect(RSQLite::SQLite(), ALL_LKPS_MAPS_DB)
all_lkps_maps <- ukbwranglr::list_tbls_from_dbconn(con)
on.exit(DBI::dbDisconnect(con))
all_lkps_maps <- ukbwranglr::db_tables_to_list(con)
on.exit(DBI::dbDisconnect(con))
get_caliber_codes_standardise_and_map(ukb_code_mappings = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
source("code/caliber.R")
source(file.path("code", "caliber.R")
source(file.path("code", "caliber.R"))
get_caliber_codes_standardise_and_map(ukb_code_mappings = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
get_caliber_codes_standardise_and_map(all_lkps_maps = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
?codemapper::lookup_codes
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
get_caliber_codes_standardise_and_map(ukb_code_mappings = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
get_caliber_codes_standardise_and_map(all_lkps_maps = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
get_caliber_codes_standardise_and_map(all_lkps_maps = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
get_caliber_codes_standardise_and_map(all_lkps_maps = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
get_caliber_codes_standardise_and_map(all_lkps_maps = all_lkps_maps) %>%
# TODO - this is a temp fix
dplyr::select(-phenotype_source) %>%
dplyr::filter(!is.na(author))
result$secondary_care_codes_icd9 <-
map_caliber_multiple_disease_categories(
result$primary_care_codes_read2,
all_lkps_maps = all_lkps_maps,
from = "read2",
to = "icd9"
)
View(result$secondary_care_codes_icd9)
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
library(targets)
tar_visnetwork(targets_only = TRUE)
?codemapper::reformat_icd10_codes()
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
source('~/OneDrive - University College London/Lenovo backup 181219/WellcomePhD/Year2/ukbwranglr_resources/code/caliber.R')
targets::tar_visnetwork(targets_only = TRUE)
